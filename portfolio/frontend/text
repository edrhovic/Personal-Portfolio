from flask import Blueprint, render_template, redirect, url_for, session, request, make_response, flash
import mysql.connector
import re
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash

connect = mysql.connector.connect(
    host='localhost',
    port='3306',
    database='my_db', 
    user='root',
    password=''  
)

cursor = connect.cursor(dictionary=True)

blueprint = Blueprint('blueprint', __name__, template_folder='templates')

def make_header(response):
    response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, proxy-revalidate'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'
    return response


@blueprint.route('/')
@blueprint.route('/home')
def dashboard():
    if 'loggedIn' in session:
        first_name = session.get('FirstName')
        response = make_response(render_template('dashboard.html', first_name=first_name))
        return make_header(response)
    return redirect(url_for('blueprint.login'))


@blueprint.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'loggedIn' in session:
        username = session['loggedIn']
        
        if request.method == 'POST':
            first_name = request.form.get('firstName')
            middle_name = request.form.get('middleName')
            last_name = request.form.get('lastName')
            birthday = request.form.get('birthday')
            age = request.form.get('age')
            contact_num = request.form.get('contactNum')
            email = request.form.get('email')
            
            errors = []

            name_regex = r'^[A-Za-z ]{2,}$'
            if not re.match(name_regex, first_name) or not first_name.strip():
                errors.append("First name must contain only letters and spaces, and be at least 2 characters long.")
            if not re.match(name_regex, middle_name) or not middle_name.strip():
                errors.append("Middle name must contain only letters and spaces, and be at least 2 characters long.")
            if not re.match(name_regex, last_name) or not last_name.strip():
                errors.append("Last name must contain only letters and spaces, and be at least 2 characters long.")

            if not re.match(r'^\d{11}$', contact_num):
                errors.append("Contact number must be exactly 11 digits, with no symbols or spaces.")

            email_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            if not re.match(email_regex, email):
                errors.append("Invalid email address. Please use a valid email (e.g., example@example.com).")

            birthday_regex = r'^\d{4}-\d{2}-\d{2}$'
            if not re.match(birthday_regex, birthday):
                errors.append("Invalid birthday format. Please enter a valid date (e.g., YYYY-MM-DD).")
            else:
                birthday_obj = datetime.strptime(birthday, '%Y-%m-%d')
                current_age = datetime.now().year - birthday_obj.year
                if datetime.now().month < birthday_obj.month or (datetime.now().month == birthday_obj.month and datetime.now().day < birthday_obj.day):
                    current_age -= 1
                if int(age) != current_age:
                    errors.append("Age must be accurate based on the given birthday.")

            if errors:
                for error in errors:
                    flash(error, category='error')
                return redirect(url_for('blueprint.profile'))

            cursor.execute(''' 
                UPDATE my_tb 
                SET FirstName = %s, MiddleName = %s, LastName = %s, Birthday = %s, Age = %s, ContactNum = %s, Email = %s 
                WHERE username = %s
            ''', (first_name, middle_name, last_name, birthday, age, contact_num, email, username))
            connect.commit()
            return redirect(url_for('blueprint.profile'))

        cursor.execute('SELECT * FROM my_tb WHERE username = %s', (username,))
        user = cursor.fetchone()

        if user:
            return render_template('profile.html', user=user)

    return redirect(url_for('blueprint.login'))


@blueprint.route('/delete_profile', methods=['POST'])
def delete_profile():
    if 'loggedIn' in session:
        username = session['loggedIn']
        entered_password = request.form['password']
        
        cursor.execute('SELECT password FROM my_tb WHERE username = %s', (username,))
        user = cursor.fetchone()

        if user and check_password_hash(user['password'], entered_password):
            cursor.execute('DELETE FROM my_tb WHERE username = %s', (username,))
            connect.commit()
            session.pop('loggedIn', None)
            flash('Your profile has been deleted successfully!', 'success')
            return redirect(url_for('blueprint.login'))
        
        else:
            flash('Incorrect password. Please try again.', 'danger')
            return redirect(url_for('blueprint.login'))

    return redirect(url_for('blueprint.login'))

